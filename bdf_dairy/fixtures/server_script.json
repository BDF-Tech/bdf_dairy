[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-12-09 21:04:05.647326",
  "module": "BDF Dairy",
  "name": "Sales Invoice Minimum Order Quantity Validation",
  "reference_doctype": "Sales Invoice",
  "script": "customer_group = frappe.db.get_value(\"Customer\", doc.customer, \"customer_group\")\n\nmoq_list = frappe.db.sql(\"\"\"\n    SELECT moq.name\n    FROM `tabMinimum Order Quantity` AS moq\n    LEFT JOIN `tabMOQ Customer` AS moq_customer ON moq.name = moq_customer.parent\n    WHERE moq.customer_group = %s\n    AND (moq_customer.customer = %s OR moq_customer.customer IS NULL)\n\"\"\", (customer_group, doc.customer), as_dict=True)\n\nfor m in moq_list:\n    mo_doc = frappe.get_doc(\"Minimum Order Quantity\", m['name'])\n    moq_details = {(detail.item, detail.uom): detail for detail in mo_doc.moq_details}\n\n    for item in doc.items:\n        key = (item.item_code, item.uom)\n        if key in moq_details:\n            mo = moq_details[key]\n            if mo.qty > item.qty:\n                frappe.throw(f\"The {item.item_code} Item Must Have Greater Qty Than {mo.qty} With UOM of {item.uom}\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2024-12-06 17:09:50.891146",
  "module": "BDF Dairy",
  "name": "Restrict To Create Multiple Sales Invoice",
  "reference_doctype": "Sales Invoice",
  "script": "if not doc.is_return:\n    if doc.items[0].sales_order:\n        sales_inv = frappe.db.get_value(\"Sales Order\", doc.items[0].sales_order, 'custom_sales_invoice')\n        if sales_inv:\n            frappe.throw(f\"The Sales Invoice Is Already Submitted Against {doc.items[0].sales_order} This Sales Order\")\n        else:\n            frappe.db.set_value(\"Sales Order\", doc.items[0].sales_order, 'custom_sales_invoice', doc.name)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-11-26 22:38:21.971336",
  "module": "BDF Dairy",
  "name": "Restrict And Update Automatic Rate",
  "reference_doctype": "Item Price",
  "script": "if frappe.db.exists(\"Price List\", {'name': doc.price_list, 'custom_is_standard': 1}):\n    price_list_setting = frappe.db.exists(\"Price List Settings\", {'item_code': doc.item_code, 'standard_price_list': doc.price_list})\n    if price_list_setting:\n        price_list_setting = frappe.get_doc(\"Price List Settings\", price_list_setting)\n        for price_lst in price_list_setting.get('price_list_settings_changes', {'change': ['!=', 0]}):\n            item_price_rate = frappe.db.get_value(\"Item Price\", {'item_code': doc.item_code, 'price_list': price_lst.price_list}, 'price_list_rate')\n            if item_price_rate is not None:\n                frappe.db.set_value(\"Item Price\", {'item_code': doc.item_code, 'price_list': price_lst.price_list}, 'price_list_rate', item_price_rate + price_lst.change)\nelse:\n    frappe.throw(\"You can only change item rates for non-standard price lists.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-11-13 09:00:33.408763",
  "module": "BDF Dairy",
  "name": "Process Loss Handling For Work Order",
  "reference_doctype": "Stock Entry",
  "script": "if doc.purpose == \"Manufacture\":\n    stock_entry = frappe.new_doc(\"Stock Entry\")\n    stock_entry.stock_entry_type = \"Handling Loss\"\n    stock_entry_flag = False\n    for itm in doc.get('items', filters={'is_finished_item':1}):\n        finished_itm = itm.item_code\n        break\n    for itm in doc.items:\n        if itm.custom_handling_loss_qty > 0 and itm.s_warehouse:\n            stock_entry_flag = True\n            stock_entry.append('items', {\n                'item_code': itm.item_code, \n                's_warehouse': itm.s_warehouse,\n                'qty': itm.custom_handling_loss_qty,\n                'custom_finished_item': finished_itm\n            })\n    if stock_entry_flag:\n        stock_entry.insert()\n        stock_entry.submit()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-12-09 21:04:39.668317",
  "module": "BDF Dairy",
  "name": "Sales Order Minimum Order Quantity Validation",
  "reference_doctype": "Sales Order",
  "script": "customer_group = frappe.db.get_value(\"Customer\", doc.customer, \"customer_group\")\n\nmoq_list = frappe.db.sql(\"\"\"\n    SELECT moq.name\n    FROM `tabMinimum Order Quantity` AS moq\n    LEFT JOIN `tabMOQ Customer` AS moq_customer ON moq.name = moq_customer.parent\n    WHERE moq.customer_group = %s\n    AND (moq_customer.customer = %s OR moq_customer.customer IS NULL)\n\"\"\", (customer_group, doc.customer), as_dict=True)\n\nfor m in moq_list:\n    mo_doc = frappe.get_doc(\"Minimum Order Quantity\", m['name'])\n    moq_details = {(detail.item, detail.uom): detail for detail in mo_doc.moq_details}\n\n    for item in doc.items:\n        key = (item.item_code, item.uom)\n        if key in moq_details:\n            mo = moq_details[key]\n            if mo.qty > item.qty:\n                frappe.throw(f\"The {item.item_code} Item Must Have Greater Qty Than {mo.qty} With UOM of {item.uom}\")\n",
  "script_type": "DocType Event"
 }
]